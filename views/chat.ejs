<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Чат с SOYLE Bot</title>
    <link rel="stylesheet" href="public/css/styles.css">
  <style>
    body {
      font-family: sans-serif;
        background-image: url('/images/background.jpg');
    }

    .chat-container {
      background-color: white;
      max-width: 400px;
      margin: 0 auto;
      padding: 20px;
      border-radius: 40px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      min-height: 500px; /* Minimum height to ensure container grows */
    }

    .chat-buttons{
        text-align: center;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .chat-message {
      background-color: aliceblue;
      color: rgb(37, 38, 44);
      padding: 10px 14px;
      border-radius: 5px;
      margin-bottom: 12px;
      max-width: 80%;
      word-wrap: break-word;
      white-space: pre-wrap;
      line-height: 1.4;
    }

    #chat-area {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
      margin-bottom: 20px;
    }

    .user-message {
      align-self: flex-end;
      display: inline-block;
      background-color: #A78CE2;
      color: black;
      border-radius: 40px;
      text-align: center;
      padding: 8px 16px;
      max-width: 80%;
      word-wrap: break-word;
      white-space: normal;
      line-height: 1.3;
    }

    .chat-buttons button {
      display: block;
      padding: 10px 16px;
      margin: 6px 0;
      border: none;
      border-radius: 25px;
      background-color: #e8ba76;
      color: #333;
      cursor: pointer;
      width: 100%;
      text-align: center;
      white-space: normal;
      word-wrap: break-word;
      line-height: 1.3;
      min-height: 40px;
    }

    .chat-buttons button:hover {
      background-color: #A78CE2;
    }

    #back-button {
      display: none;
      align-self: center;
      background-color: #A78CE2;
      color: black;
      border: none;
      border-radius: 40px;
      padding: 8px 16px;
      cursor: pointer;
      white-space: nowrap;
      margin-top: 10px;
    }

    /* Responsive design for smaller screens */
    @media (max-width: 480px) {
      .chat-container {
        max-width: 95%;
        margin: 10px auto;
        padding: 15px;
      }

      .chat-message, .user-message {
        max-width: 90%;
        font-size: 14px;
      }
    }
  </style>
    <header style="
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  background-color: #ffffff;
  border-bottom: 1px solid #ccc;
  margin-bottom: 10px;
">
  <div style="display: flex; align-items: center;">
      <img src="/images/chatbot.png" alt="Логотип" style="height: 60px;">
    <div style="display: flex; flex-direction: column; font-size: 15px; color: #555;">
      <span style="font-weight: bolder">SOYLE Bot</span>
      <span><%= t('chat.subtitle') %></span>
    </div>
  </div>
  <div style="display: flex; align-items: center; gap: 16px;">
    <form id="langForm" style="display:inline-block; margin-right: 16px;">
      <select id="langSelect" name="lang" class="lang-btn">
        <option value="ru" <%= lang === 'ru' ? 'selected' : '' %>>Русский</option>
        <option value="kk" <%= lang === 'kk' ? 'selected' : '' %>>Қазақша</option>
        <option value="en" <%= lang === 'en' ? 'selected' : '' %>>English</option>
      </select>
    </form>
    <a href="/" style="text-decoration: none; color: #A78CE2; font-weight: bold; margin-right: 10px;">
      <%= t('chat.exit') %>
    </a>
  </div>
</header>

</head>
<body>

  <div class="chat-container">
    <div id="chat-area">
    </div>

    <div class="typing-indicator" id="typing-indicator">
      <div class="typing-dot"></div>
      <div class="typing-dot"></div>
      <div class="typing-dot"></div>
    </div>

    <div class="chat-buttons" id="role-buttons"></div>
      <button id="back-button" style="display:none;" onclick="goBack()"><%= t('chat.back_btn') %></button>

  </div>

<script>
  // Получаем все тексты чата из локализации
  const chatbotData = <%- JSON.stringify(t('chatbot_full')) %>;
  const typingText = <%- JSON.stringify(t('chat.typing')) %>;

  // Обработчик смены языка (гарантированная перезагрузка)
  document.addEventListener('DOMContentLoaded', function() {
    const langSelect = document.getElementById('langSelect');
    if (langSelect) {
      langSelect.addEventListener('change', function() {
        document.cookie = 'lang=' + this.value + ';path=/';
        window.location.reload();
      });
    }
  });

  const chatArea = document.getElementById('chat-area');
  const roleButtons = document.getElementById('role-buttons');
  const backButton = document.getElementById('back-button');
  const typingIndicator = document.getElementById('typing-indicator');

  let currentCategory = null;
  let isSecondLayer = false;
  let buttonAppearanceActive = false;

  window.addEventListener('DOMContentLoaded', async () => {
    // Приветственные сообщения из локализации
    await addMessage(chatbotData.welcome_1);
    await addMessage(chatbotData.welcome_2);
    buttonAppearanceActive = true;
    // Проверка на наличие категорий
    if (Array.isArray(chatbotData.categories) && chatbotData.categories.length > 0) {
      showButtonsOneByOne(chatbotData.categories);
    } else {
      console.error('Нет категорий для отображения. Проверьте локализацию chatbot_full.categories');
    }
  });

  function showButtonsOneByOne(buttonsArray, index = 0) {
    if (index >= buttonsArray.length || !buttonAppearanceActive) {
      typingIndicator.style.display = 'none';
      return;
    }
    typingIndicator.style.display = 'flex';
    setTimeout(() => {
      if (!buttonAppearanceActive) {
        typingIndicator.style.display = 'none';
        return;
      }
      const button = document.createElement("button");
      if (isSecondLayer) {
        button.onclick = () => {
          buttonAppearanceActive = false;
          handleSecondLayerQuestion(buttonsArray[index], currentCategory);
        };
      } else {
        button.onclick = () => {
          buttonAppearanceActive = false;
          handleCategory(buttonsArray[index]);
        };
      }
      const span = document.createElement("span");
      button.appendChild(span);
      roleButtons.appendChild(button);
      typingIndicator.style.display = 'none';
      typeText(span, buttonsArray[index], () => {
        setTimeout(() => {
          showButtonsOneByOne(buttonsArray, index + 1);
        }, 100);
      });
    }, 300);
  }

  // Create and show the typing indicator with bouncing dots
  function showTypingIndicator() {
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing-indicator';
    typingDiv.className = 'chat-message';
    typingDiv.innerHTML = typingText + '<span class="dot">.</span><span class="dot">.</span><span class="dot">.</span>';
    chatArea.appendChild(typingDiv);
  }

  // Remove typing indicator
  function removeTypingIndicator() {
    const typingDiv = document.getElementById('typing-indicator');
    if (typingDiv) typingDiv.remove();
  }

  // Helper function to create a node from an HTML string (supports <strong>, <br>)
  function createNodeFromHTML(html) {
    const template = document.createElement('template');
    template.innerHTML = html.trim();
    return template.content;
  }

  // Typing effect that supports <br> and <strong> tags
  async function typeMessage(htmlText) {
    return new Promise((resolve) => {
      const msg = document.createElement('div');
      msg.className = 'chat-message';
      chatArea.appendChild(msg);

      const fragment = createNodeFromHTML(htmlText);

      const segments = [];

      function processNode(node, parentTag = null) {
        if (node.nodeType === Node.TEXT_NODE) {
          segments.push({ text: node.textContent, tag: parentTag });
        } else if (node.nodeType === Node.ELEMENT_NODE) {
          if (node.tagName === 'BR') {
            segments.push({ br: true });
          } else if (node.tagName === 'STRONG') {
            node.childNodes.forEach(child => processNode(child, 'strong'));
          } else {
            node.childNodes.forEach(child => processNode(child, parentTag));
          }
        }
      }

      fragment.childNodes.forEach(node => processNode(node));

      let idx = 0;

      function typeNextChar() {
        if (idx >= segments.length) {
          resolve();
          return;
        }

        const segment = segments[idx];

        if (segment.br) {
          msg.appendChild(document.createElement('br'));
          idx++;
          setTimeout(typeNextChar, 30);
        } else {
          const { text, tag } = segment;
          let typedText = '';
          let charIdx = 0;

          let container;
          if (tag === 'strong') {
            container = document.createElement('strong');
          } else {
            container = document.createTextNode('');
            msg.appendChild(container);
          }

          if (tag === 'strong') {
            msg.appendChild(container);
          }

          function typeChar() {
            if (charIdx < text.length) {
              typedText += text[charIdx];
              if (tag === 'strong') {
                container.textContent = typedText;
              } else {
                container.textContent = typedText;
              }
              charIdx++;
              setTimeout(typeChar, 30);
            } else {
              idx++;
              setTimeout(typeNextChar, 30);
            }
          }

          typeChar();
        }
      }

      typeNextChar();
    });
  }

  // Add a message with typing and typing indicator
  async function addMessage(text, isUser = false) {
    if (isUser) {
      // User message - no typing animation
      const msg = document.createElement('div');
      msg.className = 'chat-message user-message';
      msg.innerHTML = text.replace(/\n/g, '<br>');
      chatArea.appendChild(msg);
    } else {
      showTypingIndicator();
      await new Promise(r => setTimeout(r, 600)); // simulate typing delay
      removeTypingIndicator();
      await typeMessage(text);
    }
    // Scroll chat to bottom
    chatArea.scrollTop = chatArea.scrollHeight;
  }

  function goBack() {
    if (isSecondLayer) {
      isSecondLayer = false;
      currentCategory = null;
      buttonAppearanceActive = false;
      roleButtons.innerHTML = '';
      typingIndicator.style.display = 'none';
      setTimeout(() => {
        buttonAppearanceActive = true;
        showButtonsOneByOne(chatbotData.categories);
      }, 100);
      backButton.style.display = 'none';
    } else {
      window.location.href = 'chat.html';
    }
  }

  function typeText(element, text, callback) {
    let i = 0;
    const interval = setInterval(() => {
      element.textContent += text[i];
      i++;
      if (i === text.length) {
        clearInterval(interval);
        callback();
      }
    }, 30);
  }

  // Handle first layer category selection
  function handleCategory(category) {
    addMessage(category, true);
    currentCategory = category;
    isSecondLayer = true;

    // Clear all buttons immediately and stop any ongoing appearances
    buttonAppearanceActive = false;
    roleButtons.innerHTML = '';
    typingIndicator.style.display = 'none';

    setTimeout(async () => {
      await addMessage(chatbotData.choose_question);
      buttonAppearanceActive = true;
      showButtonsOneByOne(chatbotData.questions[category]);
      backButton.style.display = 'inline-block';
    }, 2000);
  }

  // Handle second layer question selection - FIXED: No question repetition
  function handleSecondLayerQuestion(question, category) {
    addMessage(question, true);

    // Clear all buttons immediately and stop any ongoing appearances
    buttonAppearanceActive = false;
    roleButtons.innerHTML = '';
    typingIndicator.style.display = 'none';

    setTimeout(async () => {
      const answer = chatbotData.answers[question];
      // Only show the answer, not the question
      await addMessage(answer);

      // Show option to go back or ask another question
      setTimeout(async () => {
        await addMessage(chatbotData.another_question);

        // Кнопка "Задать ещё вопрос из этой категории"
        const anotherQuestionBtn = document.createElement("button");
        anotherQuestionBtn.textContent = chatbotData.another_question_btn || 'Задать ещё вопрос из этой категории';
        anotherQuestionBtn.onclick = () => {
          roleButtons.innerHTML = '';
          buttonAppearanceActive = true;
          showButtonsOneByOne(chatbotData.questions[category]);
        };
        roleButtons.appendChild(anotherQuestionBtn);

        // Кнопка "Вернуться к категориям"
        const backToCategoriesBtn = document.createElement("button");
        backToCategoriesBtn.textContent = chatbotData.back_to_categories_btn || 'Вернуться к категориям';
        backToCategoriesBtn.onclick = () => {
          isSecondLayer = false;
          currentCategory = null;
          roleButtons.innerHTML = '';
          buttonAppearanceActive = true;
          showButtonsOneByOne(chatbotData.categories);
          backButton.style.display = 'none';
        };
        roleButtons.appendChild(backToCategoriesBtn);
      }, 1500);
    }, 2000);
  }
</script>

<style>
  /* Bouncing dots animation for typing indicator */
  #typing-indicator .dot {
    animation-name: bounce;
    animation-duration: 1.4s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
    display: inline-block;
    font-weight: bold;
    font-size: 16px;
  }
  #typing-indicator .dot:nth-child(1) {
    animation-delay: 0s;
  }
  #typing-indicator .dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  #typing-indicator .dot:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes bounce {
    0%, 80%, 100% {
      transform: translateY(0);
      opacity: 0.3;
    }
    40% {
      transform: translateY(-10px);
      opacity: 1;
    }
  }
  .lang-btn {
    background: #A78CE2;
    color: #fff;
    border: none;
    border-radius: 30px;
    padding: 10px 24px;
    font-size: 1rem;
    margin-right: 0;
    cursor: pointer;
    font-weight: bold;
    box-shadow: 0 4px 15px rgba(167,140,226,0.08);
    transition: background 0.2s;
  }
  .lang-btn:hover {
    background: #8c5fd6;
  }
</style>
</body>
</html>